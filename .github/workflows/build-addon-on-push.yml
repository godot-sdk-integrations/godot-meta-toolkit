# Workflow to automatically create the Godot Meta Toolkit addon
name: Build on push

on: [push, pull_request]

permissions:
  contents: write

env:
  # Only used for the cache key. Increment version to force clean build.
  GODOT_BASE_BRANCH: main
  SCONS_CACHE: ${{ github.workspace }}/.scons-cache/
  # Meta Platform SDK v71.0.
  META_PLATFORM_SDK_URL: "https://securecdn.oculus.com/binaries/download/?id=6945981485525494"

jobs:
  build:
    name: Building for ${{ matrix.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: üêß Linux (x86_64)
            os: ubuntu-20.04
            platform: linux
            flags: arch=x86_64
            artifact_name: godotmetatoolkit-build-files-linux-x86_64
            artifact_path: godot_meta_toolkit/demo/addons/godot_meta_toolkit/.bin/linux/*/*/*.so
            cache-name: linux-x86_64
          - name: üèÅ Windows (x86_64)
            os: windows-latest
            platform: windows
            artifact_name: godotmetatoolkit-build-files-windows
            artifact_path: godot_meta_toolkit/demo/addons/godot_meta_toolkit/.bin/windows/*/*/*.dll
            cache-name: windows-x86_64
          - name: üçé MacOS (universal)
            os: macos-latest
            platform: macos
            flags: arch=universal
            artifact_name: godotmetatoolkit-build-files-macos
            artifact_path: godot_meta_toolkit/demo/addons/godot_meta_toolkit/.bin/macos/*/*.framework
            cache-name: macos-universal
          - name: ü§ñ Android (arm64)
            os: ubuntu-20.04
            platform: android
            flags: arch=arm64
            artifact_name: godotmetatoolkit-build-files-android
            artifact_path: |
              godot_meta_toolkit/demo/addons/godot_meta_toolkit/.bin/android/*/*/*.so
            cache-name: android

    # Note, to satisfy the asset library we need to make sure our zip files have a root folder
    # this is why we checkout into godot_meta_toolkit and build into asset
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: godot_meta_toolkit
          submodules: recursive
          lfs: 'true'
      - name: Restore Godot build cache
        uses: ./godot_meta_toolkit/thirdparty/godot-cpp/.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true
      - name: Download Meta Platform SDK (POSIX)
        run: |
          wget "${{ env.META_PLATFORM_SDK_URL }}" -O meta_platform_sdk.zip
          cd godot_meta_toolkit/thirdparty/ovr_platform_sdk
          unzip -a ../../../meta_platform_sdk.zip
          rm -rf Android/libs/armeabi-v7a
          cd ../../..
          rm meta_platform_sdk.zip
        if: runner.os != 'Windows'
      - name: Download Meta Platform SDK (Windows)
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "${{ env.META_PLATFORM_SDK_URL }}" -OutFile "meta_platform_sdk.zip"
          Set-Location "godot_meta_toolkit/thirdparty/ovr_platform_sdk"
          Expand-Archive -Path "../../../meta_platform_sdk.zip" -DestinationPath "."
          Set-Location "../../.."
          Remove-Item "meta_platform_sdk.zip"
        if: runner.os == 'Windows'
      - name: Set up Python (for SCons)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Android dependencies
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c
          link-to-sdk: true
        if: matrix.platform == 'android'
      - name: Install scons
        run: |
          python -m pip install scons==4.0.0
      - name: Create extension library
        run: |
          cd godot_meta_toolkit
          scons platform=${{ matrix.platform }} target=template_debug ${{ matrix.flags }} custom_api_file=thirdparty/godot_cpp_gdextension_api/extension_api.json build_profile=thirdparty/godot_cpp_build_profile/build_profile.json
          scons platform=${{ matrix.platform }} target=template_release ${{ matrix.flags }} custom_api_file=thirdparty/godot_cpp_gdextension_api/extension_api.json build_profile=thirdparty/godot_cpp_build_profile/build_profile.json
          cd ..
      - name: Save Godot build cache
        uses: ./godot_meta_toolkit/thirdparty/godot-cpp/.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true
      - name: Upload build files (artifacts)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          include-hidden-files: true
          path: |
            ${{ matrix.artifact_path }}

  asset:
    name: Assembling the asset
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: godot_meta_toolkit
          submodules: recursive
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - name: Download Meta Platform SDK
        run: |
          wget "${{ env.META_PLATFORM_SDK_URL }}" -O meta_platform_sdk.zip
          cd godot_meta_toolkit/thirdparty/ovr_platform_sdk
          unzip -a ../../../meta_platform_sdk.zip
          rm -rf Android/libs/armeabi-v7a
          cd ../../..
          rm meta_platform_sdk.zip
      - name: Setup java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "adopt"
      - name: Validate Gradle wrapper
        uses: gradle/actions/wrapper-validation@v3
      - name: Set up Python (for SCons)
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install scons
        run: |
          python -m pip install scons==4.0.0
      - name: Copy Android binaries
        run: |
          mkdir -p godot_meta_toolkit/toolkit/src/main/libs/debug/arm64-v8a/arm64-v8a
          cp godotmetatoolkit-build-files-android/template_debug/arm64/libgodot_meta_toolkit.so godot_meta_toolkit/toolkit/src/main/libs/debug/arm64-v8a/arm64-v8a/

          mkdir -p godot_meta_toolkit/toolkit/src/main/libs/release/arm64-v8a/arm64-v8a
          cp godotmetatoolkit-build-files-android/template_release/arm64/libgodot_meta_toolkit.so godot_meta_toolkit/toolkit/src/main/libs/release/arm64-v8a/arm64-v8a/
      - name: Create Godot Meta Toolkit AARs
        run: |
          cd godot_meta_toolkit
          ./gradlew build
          scons --directory=thirdparty/godot platform=android target=template_debug arch=arm64
          scons --directory=thirdparty/godot platform=android target=template_release arch=arm64
          ./gradlew generatePrebuiltApks
          cd ..
      - name: Create Godot Meta Toolkit Addon
        run: |
          mkdir asset
          cp -r godot_meta_toolkit/demo/addons asset

      - name: Copying artifacts
        run: |
          mkdir -p asset/addons/godot_meta_toolkit/.bin/android/
          cp -r godotmetatoolkit-build-files-android/* asset/addons/godot_meta_toolkit/.bin/android/

          mkdir -p asset/addons/godot_meta_toolkit/.bin/linux/
          cp -r godotmetatoolkit-build-files-linux-x86_64/* asset/addons/godot_meta_toolkit/.bin/linux/

          mkdir -p asset/addons/godot_meta_toolkit/.bin/windows/
          cp -r godotmetatoolkit-build-files-windows/* asset/addons/godot_meta_toolkit/.bin/windows/

          mkdir -p asset/addons/godot_meta_toolkit/.bin/macos/
          cp -r godotmetatoolkit-build-files-macos/* asset/addons/godot_meta_toolkit/.bin/macos/

      - name: Create Godot Meta Toolkit addon artifact
        uses: actions/upload-artifact@v4
        with:
          name: GodotMetaToolkitAddon
          include-hidden-files: true
          path: |
            asset
      - name: Zip addon
        run: |
          zip -qq -r godotmetatoolkitaddon.zip asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      - name: Create and upload asset
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: "godotmetatoolkitaddon.zip"
          draft: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitDraftDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
