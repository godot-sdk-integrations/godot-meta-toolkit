// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    apply from: 'config.gradle'

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/"}
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$versions.gradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion"
    }
}

plugins {}

apply from: 'config.gradle'

ext {
    addonPrebuiltDir = "demo/addons/godot_meta_toolkit/.build_template/prebuilt"

    godotDir = "thirdparty/godot"
    godotJavaDir = "${godotDir}/platform/android/java/"

    godotAppStandardManifestDir = "${godotJavaDir}/app/src/standard/"
    godotAppOutputDir = "${godotJavaDir}/app/build/outputs/apk/standard/"

    toolkitAarOutputDir = "toolkit/build/outputs/aar/"
    toolkitDebugAar = "${toolkitAarOutputDir}/godot_meta_toolkit-debug.aar"
    toolkitReleaseAar = "${toolkitAarOutputDir}/godot_meta_toolkit-release.aar"
}

task clean(type: Delete) {
    delete rootProject.buildDir

    // Delete the bin directory for the 'godot_meta_toolkit' addon
    delete("demo/addons/godot_meta_toolkit/.bin")

    dependsOn 'cleanPrebuiltApks'

    dependsOn 'cleanScons'

    dependsOn ':toolkit:clean'
}

/**
 * Build the 'godot_meta_toolkit'
 */
task buildToolkit {
    // Generate the editor gdextension binaries
    dependsOn ':buildSconsArtifacts'

    // Generate the AAR binaries
    dependsOn ':toolkit:build'
}

/**
 * Generate the addon by building the 'toolkit' module and the prebuilt apks.
 */
task generateAddon {
    dependsOn buildToolkit

    // Generate the prebuilt apks
    dependsOn ':generatePrebuiltApks'
}

/*
 * Find scons executable path
 */
def getSconsExecutableFile() {
    File sconsExecutableFile = null
    def sconsName = "scons"
    def sconsExts = (org.gradle.internal.os.OperatingSystem.current().isWindows()
            ? [".bat", ".cmd", ".ps1", ".exe"]
            : [""])
    logger.debug("Looking for $sconsName executable path")
    for (ext in sconsExts) {
        String sconsNameExt = sconsName + ext
        logger.debug("Checking $sconsNameExt")
        sconsExecutableFile = org.gradle.internal.os.OperatingSystem.current().findInPath(sconsNameExt)
        if (sconsExecutableFile != null) {
            // We're done!
            break
        }
        // Check all the options in path
        List<File> allOptions = org.gradle.internal.os.OperatingSystem.current().findAllInPath(sconsNameExt)
        if (!allOptions.isEmpty()) {
            // Pick the first option and we're done!
            sconsExecutableFile = allOptions.get(0)
            break
        }
    }

    return sconsExecutableFile
}

/**
 * Utility method to create common scons tasks for use by other tasks.
 */
def createSconsTasks(File sconsExecutableFile, boolean clean) {
    def defaultArgs = [
            "--directory=.",
            "custom_api_file=thirdparty/godot_cpp_gdextension_api/extension_api.json",
            "build_profile=thirdparty/godot_cpp_build_profile/build_profile.json",
    ]

    if (clean) {
        defaultArgs << "-c"
    }

    def taskPrefix = (clean ? "clean" : "build")

    // Android.
    tasks.create(name: "${taskPrefix}GodotMetaToolkitAndroidArm64Debug", type: Exec) {
        executable sconsExecutableFile.absolutePath
        args defaultArgs + ["platform=android", "target=template_debug", "arch=arm64"]
    }
    tasks.create(name: "${taskPrefix}GodotMetaToolkitAndroidArm64Release", type: Exec) {
        executable sconsExecutableFile.absolutePath
        args defaultArgs + ["platform=android", "target=template_release", "arch=arm64"]
    }

    // Desktop.
    tasks.create(name: "${taskPrefix}GodotMetaToolkitDesktopDebug", type: Exec) {
        executable sconsExecutableFile.absolutePath
        args defaultArgs + ["target=template_debug"]
    }
    tasks.create(name: "${taskPrefix}GodotMetaToolkitDesktopRelease", type: Exec) {
        executable sconsExecutableFile.absolutePath
        args defaultArgs + ["target=template_release"]
    }
}

/**
 * Build the scons artifacts for the project
 */
task buildSconsArtifacts {
    File sconsExecutableFile = getSconsExecutableFile()

    // Using `doFirst` so the exception doesn't happen until this task actually runs.
    doFirst {
        if (sconsExecutableFile == null) {
            throw new GradleException("Unable to find executable path for the 'scons' command.")
        } else {
            logger.debug("Found executable path for scons: ${sconsExecutableFile.absolutePath}")
        }
    }

    if (sconsExecutableFile != null) {
        createSconsTasks(sconsExecutableFile, false)

        // Android.
        dependsOn 'buildGodotMetaToolkitAndroidArm64Debug'
        dependsOn 'buildGodotMetaToolkitAndroidArm64Release'

        // Desktop.
        dependsOn 'buildGodotMetaToolkitDesktopDebug'
        dependsOn 'buildGodotMetaToolkitDesktopRelease'
    }
}

/**
 * Scons clean for the project
 */
task cleanScons {
    File sconsExecutableFile = getSconsExecutableFile()

    // Using `doFirst` so the exception doesn't happen until this task actually runs.
    doFirst {
        if (sconsExecutableFile == null) {
            throw new GradleException("Unable to find executable path for the 'scons' command.")
        } else {
            logger.debug("Found executable path for scons: ${sconsExecutableFile.absolutePath}")
        }
    }

    if (sconsExecutableFile != null) {
        createSconsTasks(sconsExecutableFile, true)

        // Android.
        dependsOn 'cleanGodotMetaToolkitAndroidArm64Debug'
        dependsOn 'cleanGodotMetaToolkitAndroidArm64Release'

        // Desktop.
        dependsOn 'cleanGodotMetaToolkitDesktopDebug'
        dependsOn 'cleanGodotMetaToolkitDesktopRelease'
    }
}

/**
 * Cleans the generated prebuilt apks.
 */
task cleanPrebuiltApks(type: Delete) {
    def gradlewExecutablePath = "./gradlew" + (org.gradle.internal.os.OperatingSystem.current().isWindows() ? ".bat" : "")
    File gradlewExecutable = file(gradlewExecutablePath)

    doFirst {
        if (!gradlewExecutable.exists()) {
            throw new GradleException("Unable to find executable path for the 'gradlew' script.")
        }
    }

    delete(godotAppStandardManifestDir)

    delete(addonPrebuiltDir)

    tasks.create(name: "cleanGodot", type: Exec) {
        executable gradlewExecutable.absolutePath
        args "-p", godotJavaDir, "clean"
    }
    dependsOn 'cleanGodot'
}

/**
 * Copy the prebuilt manifest to the Godot::app module. The manifest contains additional meta-data
 * that this plugin modifies at export time based on the project configuration.
 */
task copyPrebuiltManifestToGodotApp(type: Copy) {
    // Copy the prebuilt manifest
    file(godotAppStandardManifestDir).mkdirs()

    from "./prebuilt/AndroidManifest.xml"
    into "./thirdparty/godot/platform/android/java/app/src/standard/"
}

/**
 * Copy the generated prebuilt apks to the addon directory.
 */
task copyPrebuiltApksToAddon(type: Copy) {
    from godotAppOutputDir
    into addonPrebuiltDir
    include '**/*.apk'
}

/**
 * Generate the prebuilt apks.
 */
task generatePrebuiltApks() {
    def gradlewExecutablePath = "./gradlew" + (org.gradle.internal.os.OperatingSystem.current().isWindows() ? ".bat" : "")
    File gradlewExecutable = file(gradlewExecutablePath)

    File sconsExecutableFile = getSconsExecutableFile()

    doFirst {
        if (!gradlewExecutable.exists()) {
            throw new GradleException("Unable to find executable path for the 'gradlew' script.")
        }
    }

    if (sconsExecutableFile != null && sconsExecutableFile.exists()) {
        tasks.create(name: "buildGodotAndroidArm64Debug", type: Exec) {
            executable sconsExecutableFile.absolutePath
            args "--directory=${godotDir}", "platform=android", "target=template_debug", "arch=arm64"
        }

        tasks.create(name: "buildGodotAndroidArm64Release", type: Exec) {
            executable sconsExecutableFile.absolutePath
            args "--directory=${godotDir}", "platform=android", "target=template_release", "arch=arm64"
        }
    }

    tasks.create(name: "assemblePrebuiltDebugApk", type: Exec) {
        dependsOn 'copyPrebuiltManifestToGodotApp'
        dependsOn ':toolkit:assembleDebug'

        if (sconsExecutableFile != null && sconsExecutableFile.exists()) {
            dependsOn 'buildGodotAndroidArm64Debug'
        }
        executable gradlewExecutable.absolutePath
        args "-p",
                godotJavaDir,
                ":app:assembleStandardDebug",
                "-Pplugins_remote_binaries=org.godotengine:godot-openxr-vendors-meta:$versions.openxrVendorsVersion",
                "-Pplugins_local_binaries=${file(toolkitDebugAar).absolutePath}"
    }

    tasks.create(name: "assemblePrebuiltReleaseApk", type: Exec) {
        dependsOn 'copyPrebuiltManifestToGodotApp'
        dependsOn ':toolkit:assembleRelease'

        if (sconsExecutableFile != null && sconsExecutableFile.exists()) {
            dependsOn 'buildGodotAndroidArm64Release'
        }
        executable gradlewExecutable.absolutePath
        args "-p",
                godotJavaDir,
                ":app:assembleStandardRelease",
                "-Pplugins_remote_binaries=org.godotengine:godot-openxr-vendors-meta:$versions.openxrVendorsVersion",
                "-Pplugins_local_binaries=${file(toolkitReleaseAar).absolutePath}"
    }

    dependsOn 'assemblePrebuiltDebugApk'
    dependsOn 'assemblePrebuiltReleaseApk'

    finalizedBy 'copyPrebuiltApksToAddon'
}
